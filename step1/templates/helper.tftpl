#!/usr/bin/env bash

set -e

until [[ -f /var/lib/cloud/instance/boot-finished ]]; do
  sleep 1
done

sudo apt-get update
sudo apt-get -y install git sqlite3 xz-utils curl net-tools tcpdump traceroute iputils-ping jq wget
wget https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-amd64.xz -P /tmp
wget https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-amd64.xz.asc -P /tmp
gpg --keyserver keys.openpgp.org --recv 7C9E68152594688862D62AF62D9AE806EC1592E2
gpg --verify /tmp/gitea-${GITEA_VERSION}-linux-amd64.xz.asc /tmp/gitea-${GITEA_VERSION}-linux-amd64.xz
xz --decompress /tmp/gitea-${GITEA_VERSION}-linux-amd64.xz
sudo adduser \
    --system \
    --shell /bin/bash \
    --gecos 'Git Version Control' \
    --group \
    --disabled-password \
    --home /home/git \
    git
sudo mv /tmp/gitea-${GITEA_VERSION}-linux-amd64 /usr/local/bin/gitea
sudo chmod +x /usr/local/bin/gitea
sudo mkdir -p /var/lib/gitea/{custom,data,log}
sudo chown -R git:git /var/lib/gitea/
sudo chmod -R 750 /var/lib/gitea/
sudo mkdir /etc/gitea
sudo chown root:git /etc/gitea
sudo chmod 770 /etc/gitea
sudo mkdir -p /var/lib/gitea/custom/conf
export GITEA_CUSTOM=/var/lib/gitea/custom/
export GITEA_WORK_DIR=/var/lib/gitea/
sudo cp /tmp/custom_data/app.ini /var/lib/gitea/custom/conf/app.ini
sudo chown git:git /var/lib/gitea/custom/conf
sudo chown git:git /var/lib/gitea/custom/conf/app.ini
sudo chmod 750 /var/lib/gitea/custom/conf
# sudo chmod 640 /var/lib/gitea/custom/conf/app.ini
sudo ln -s /var/lib/gitea/custom/conf/app.ini /etc/gitea/app.ini
sudo chown root:git /etc/gitea/app.ini
sudo chmod 750 /etc/gitea
sudo chmod 640 /etc/gitea/app.ini
sudo wget https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/systemd/gitea.service -P /etc/systemd/system/
sudo chown git:git /var/lib/gitea/custom/conf/app.ini
sudo chmod 777 /var/lib/gitea/custom/conf/app.ini
sudo systemctl daemon-reload && sudo systemctl enable --now gitea
sleep 5
sudo chmod 640 /var/lib/gitea/custom/conf/app.ini
sudo -u git gitea admin user create --username gitea --password ${GITEA_PASSWORD} --email gitea@example.com -c /var/lib/gitea/custom/conf/app.ini
sudo -u git gitea generate secret INTERNAL_TOKEN -c /var/lib/gitea/custom/conf/app.ini
sudo -u git gitea generate secret JWT_SECRET -c /var/lib/gitea/custom/conf/app.ini
sudo -u git gitea generate secret SECRET_KEY -c /var/lib/gitea/custom/conf/app.ini
TOKEN=$(curl --silent -X POST -H "Content-Type: application/json" -k -d '{"name": "gitea"}' -u gitea:${GITEA_PASSWORD} http://127.0.0.1:3000/api/v1/users/gitea/tokens | jq -r .sha1)
curl -k -X POST \
  "http://localhost:3000/api/v1/user/repos" \
  -H "content-type: application/json" \
  -H "Authorization: token $TOKEN" \
  -d '{
  	"name":"awaf",
  	"auto_init": true
  }'
CONTENT=$(cat /tmp/${CUSTOM_DATA_DIR}/waf_policy.json | base64)
JSON_FMT='{"author": {"email": "gitea@example.com", "name": "gitea"}, "branch": "master", "committer": {"email": "gitea@example.com", "name": "gitea"}, "content": "%s", "message": "Initial commit of AWAF Policy"}'
PAYLOAD=$(printf "$JSON_FMT" "$CONTENT")
curl -X 'POST' \
  "http://localhost:3000/api/v1/repos/gitea/awaf/contents/waf_policy.json" \
  -H "accept: application/json" \
  -H "Content-Type: application/json" \
  -H "Authorization: token $TOKEN" \
  -d "$PAYLOAD"
sudo ip route add ${PREFIX} via ${GATEWAY}
wget -P /tmp ${BIGIP_AS3_RPM_URL}

if [ -z "$1" ]; then
    echo "Target machine is required for installation."
    exit 0
fi

if [ -z "$2" ]; then
    echo "Credentials [username:password] for target machine are required for installation."
    exit 0
fi

if [ -z "$3" ]; then
    echo "File path to RPM is required for installation."
    exit 0
fi

TARGET="$1"
CREDS="$2"
TARGET_RPM="$3"
RPM_NAME=$(basename $TARGET_RPM)
CURL_FLAGS="--silent --write-out \n --insecure -u $CREDS"

poll_task () {
    STATUS="STARTED"
    while [ $STATUS != "FINISHED" ]; do
        sleep 1
        RESULT=$(curl $${CURL_FLAGS} "https://$TARGET/mgmt/shared/iapp/package-management-tasks/$1")
        STATUS=$(echo $RESULT | jq -r .status)
        if [ $STATUS = "FAILED" ]; then
            echo "Failed to" $(echo $RESULT | jq -r .operation) "package:" \
                $(echo $RESULT | jq -r .errorMessage)
            exit 1
        fi
    done
}

#Get list of existing f5-appsvcs packages on target
TASK=$(curl $CURL_FLAGS -H "Content-Type: application/json" \
    -X POST https://$TARGET/mgmt/shared/iapp/package-management-tasks -d "{operation: 'QUERY'}")
poll_task $(echo $TASK | jq -r .id)
AS3RPMS=$(echo $RESULT | jq -r '.queryResponse[].packageName | select(. | startswith("f5-appsvcs"))')

#Uninstall existing f5-appsvcs packages on target
for PKG in $AS3RPMS; do
    echo "Uninstalling $PKG on $TARGET"
    DATA="{\"operation\":\"UNINSTALL\",\"packageName\":\"$PKG\"}"
    TASK=$(curl $${CURL_FLAGS} "https://$TARGET/mgmt/shared/iapp/package-management-tasks" \
        --data $DATA -H "Origin: https://$TARGET" -H "Content-Type: application/json;charset=UTF-8")
    poll_task $(echo $TASK | jq -r .id)
done

#Upload new f5-appsvcs RPM to target
echo "Uploading RPM to https://$TARGET/mgmt/shared/file-transfer/uploads/$RPM_NAME"
LEN=$(wc -c $TARGET_RPM | awk 'NR==1{print $1}')
RANGE_SIZE=5000000
CHUNKS=$(( $LEN / $RANGE_SIZE))
for i in $(seq 0 $CHUNKS); do
    START=$(( $i * $RANGE_SIZE))
    END=$(( $START + $RANGE_SIZE))
    END=$(( $LEN < $END ? $LEN : $END))
    OFFSET=$(( $START + 1))
    curl $${CURL_FLAGS} -o /dev/null --write-out "" \
        https://$TARGET/mgmt/shared/file-transfer/uploads/$RPM_NAME \
        --data-binary @<(tail -c +$OFFSET $TARGET_RPM) \
        -H "Content-Type: application/octet-stream" \
        -H "Content-Range: $START-$(( $END - 1))/$LEN" \
        -H "Content-Length: $(( $END - $START ))" \
        -H "Connection: keep-alive"
done

#Install f5-appsvcs on target
echo "Installing $RPM_NAME on $TARGET"
DATA="{\"operation\":\"INSTALL\",\"packageFilePath\":\"/var/config/rest/downloads/$RPM_NAME\"}"
TASK=$(curl $${CURL_FLAGS} "https://$TARGET/mgmt/shared/iapp/package-management-tasks" \
    --data $DATA -H "Origin: https://$TARGET" -H "Content-Type: application/json;charset=UTF-8")
poll_task $(echo $TASK | jq -r .id)

echo "Waiting for /info endpoint to be available"
until curl $${CURL_FLAGS} -o /dev/null --write-out "" --fail --silent \
    "https://$TARGET/mgmt/shared/appsvcs/info"; do
    sleep 1
done

echo "Installed $RPM_NAME on $TARGET"

exit 0